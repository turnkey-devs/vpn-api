import { ExcludeMethod, Many } from './common_utils'

export type EntityRequest<E, U extends keyof E> =
  ExcludeMethod<
  Omit<E, U> & {
    [K in U]?: E[K]
  }
  >

const DEFAULT_FACTORY_FUNC_OPTIONS = {
  defaultValue: true,
}
export const modelFactory = <E, U extends keyof E = never, V extends boolean = false>(
  classModel: new (..._arguments: any[]) => E,
  options?: {
    autoGeneratedProp?: Array<Many<U>>;
    allAutoGenerated?: V;
  },
) => (
  request: V extends false ? EntityRequest<E, U> : Partial<E>,
  options?: typeof DEFAULT_FACTORY_FUNC_OPTIONS,
): E => {
  const { defaultValue } = Object.assign(DEFAULT_FACTORY_FUNC_OPTIONS, options)

  if (typeof classModel !== `function`) 
    throw new TypeError(`modelFactory: classModel must be a constructor.`)

  const objectModel = new classModel()
  if (!defaultValue) {
    for (const key of Object.keys(objectModel)) {
      if (typeof objectModel[key] === `function`) 
        objectModel[key] = undefined
    }
  }

  for (const key in objectModel) {
    if (Object.prototype.hasOwnProperty.call(objectModel, key)) 
      objectModel[key] = (request[key as string] ?? objectModel[key])
  }

  return objectModel
}

export const modelCreator = modelFactory
